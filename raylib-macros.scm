(module raylib-macros)

; color

(define-macro (%mkcolor r g b a)
    `(let ((color (make-php-hash 4)))
        (bpc_php_hash_insert_elong_elong color #e0 ,r)
        (bpc_php_hash_insert_elong_elong color #e1 ,g)
        (bpc_php_hash_insert_elong_elong color #e2 ,b)
        (bpc_php_hash_insert_elong_elong color #e3 ,a)
        color))

(define-macro (%mkcolor-c c)
    `(%mkcolor (pragma::elong ,(string-append c ".r"))
               (pragma::elong ,(string-append c ".g"))
               (pragma::elong ,(string-append c ".b"))
               (pragma::elong ,(string-append c ".a"))))

(define-macro (%init-c-color func-name arg-idx color c)
    `(begin
        (set! ,color (mkhashw ,func-name ,arg-idx ,color))
        (when ,color
            (let ((size (php-hash-size ,color)))
                (if (>=fx size 4)
                    (let ((r (bpc_php_hash_lookup_int ,color #e0))
                          (g (bpc_php_hash_lookup_int ,color #e1))
                          (b (bpc_php_hash_lookup_int ,color #e2))
                          (a (bpc_php_hash_lookup_int ,color #e3)))
                        (unless (elong? r)
                            (set! r (or (mkelong r 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 0 to be integer, " (get-php-datatype r 'arg-parsing) " given"))))
                        (unless (elong? g)
                            (set! g (or (mkelong g 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 1 to be integer, " (get-php-datatype g 'arg-parsing) " given"))))
                        (unless (elong? b)
                            (set! b (or (mkelong b 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 2 to be integer, " (get-php-datatype b 'arg-parsing) " given"))))
                        (unless (elong? a)
                            (set! a (or (mkelong a 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 3 to be integer, " (get-php-datatype a 'arg-parsing) " given"))))
                        (pragma ,(string-append c ".r = (unsigned char)$1") ($belong->elong r))
                        (pragma ,(string-append c ".g = (unsigned char)$1") ($belong->elong g))
                        (pragma ,(string-append c ".b = (unsigned char)$1") ($belong->elong b))
                        (pragma ,(string-append c ".a = (unsigned char)$1") ($belong->elong a))
                        #t)
                    (php-error ,func-name "() expects parameter " ,arg-idx " to be array with 4(rgba order) color values, " size " given"))))))

; Vector2

(define-macro (%mkvector2 x y)
    `(let ((v2hash (make-php-hash 2)))
        (bpc_php_hash_insert_elong_obj v2hash #e0 ,x)
        (bpc_php_hash_insert_elong_obj v2hash #e1 ,y)
        v2hash))

(define-macro (%mkvector2-v v)
    `(%mkvector2 (pragma::double ,(string-append v ".x"))
                 (pragma::double ,(string-append v ".y"))))

(define-macro (%init-c-vector2 func-name arg-idx vector2 v2)
    `(begin
        (set! ,vector2 (mkhashw ,func-name ,arg-idx ,vector2))
        (when ,vector2
            (let ((size (php-hash-size ,vector2)))
                (if (>=fx size 2)
                    (let ((x (bpc_php_hash_lookup_int ,vector2 #e0))
                          (y (bpc_php_hash_lookup_int ,vector2 #e1)))
                        (unless (flonum? x)
                            (set! x (or (mkflonum x 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 0 to be float, " (get-php-datatype x 'arg-parsing) " given"))))
                        (unless (flonum? y)
                            (set! y (or (mkflonum y 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 1 to be float, " (get-php-datatype y 'arg-parsing) " given"))))
                        (pragma ,(string-append v2 ".x = (float)$1") ($real->double x))
                        (pragma ,(string-append v2 ".y = (float)$1") ($real->double y))
                        #t)
                    (php-error ,func-name "() expects parameter " ,arg-idx " to be array with 2(xy order) float values, " size " given"))))))

; Vector3

(define-macro (%mkvector3 x y z)
    `(let ((v3hash (make-php-hash 3)))
        (bpc_php_hash_insert_elong_obj v3hash #e0 ,x)
        (bpc_php_hash_insert_elong_obj v3hash #e1 ,y)
        (bpc_php_hash_insert_elong_obj v3hash #e2 ,z)
        v3hash))

(define-macro (%mkvector3-v v)
    `(%mkvector3 (pragma::double ,(string-append v ".x"))
                 (pragma::double ,(string-append v ".y"))
                 (pragma::double ,(string-append v ".z"))))

(define-macro (%init-c-vector3 func-name arg-idx vector3 v3)
    `(begin
        (set! ,vector3 (mkhashw ,func-name ,arg-idx ,vector3))
        (when ,vector3
            (let ((size (php-hash-size ,vector3)))
                (if (>=fx size 3)
                    (let ((x (bpc_php_hash_lookup_int ,vector3 #e0))
                          (y (bpc_php_hash_lookup_int ,vector3 #e1))
                          (z (bpc_php_hash_lookup_int ,vector3 #e2)))
                        (unless (flonum? x)
                            (set! x (or (mkflonum x 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 0 to be float, " (get-php-datatype x 'arg-parsing) " given"))))
                        (unless (flonum? y)
                            (set! y (or (mkflonum y 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 1 to be float, " (get-php-datatype y 'arg-parsing) " given"))))
                        (unless (flonum? z)
                            (set! z (or (mkflonum z 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 2 to be float, " (get-php-datatype z 'arg-parsing) " given"))))
                        (pragma ,(string-append v3 ".x = (float)$1") ($real->double x))
                        (pragma ,(string-append v3 ".y = (float)$1") ($real->double y))
                        (pragma ,(string-append v3 ".z = (float)$1") ($real->double z))
                        #t)
                    (php-error ,func-name "() expects parameter " ,arg-idx " to be array with 3(xyz order) float values, " size " given"))))))

; Vector4

(define-macro (%mkvector4 x y z w)
    `(let ((v4hash (make-php-hash 4)))
        (bpc_php_hash_insert_elong_obj v4hash #e0 ,x)
        (bpc_php_hash_insert_elong_obj v4hash #e1 ,y)
        (bpc_php_hash_insert_elong_obj v4hash #e2 ,z)
        (bpc_php_hash_insert_elong_obj v4hash #e3 ,w)
        v4hash))

(define-macro (%mkvector4-v v)
    `(%mkvector4 (pragma::double ,(string-append v ".x"))
                 (pragma::double ,(string-append v ".y"))
                 (pragma::double ,(string-append v ".z"))
                 (pragma::double ,(string-append v ".w"))))

(define-macro (%init-c-vector4 func-name arg-idx vector4 v4)
    `(begin
        (set! ,vector4 (mkhashw ,func-name ,arg-idx ,vector4))
        (when ,vector4
            (let ((size (php-hash-size ,vector4)))
                (if (>=fx size 4)
                    (let ((x (bpc_php_hash_lookup_int ,vector4 #e0))
                          (y (bpc_php_hash_lookup_int ,vector4 #e1))
                          (z (bpc_php_hash_lookup_int ,vector4 #e2))
                          (w (bpc_php_hash_lookup_int ,vector4 #e3)))
                        (unless (flonum? x)
                            (set! x (or (mkflonum x 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 0 to be float, " (get-php-datatype x 'arg-parsing) " given"))))
                        (unless (flonum? y)
                            (set! y (or (mkflonum y 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 1 to be float, " (get-php-datatype y 'arg-parsing) " given"))))
                        (unless (flonum? z)
                            (set! z (or (mkflonum z 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 2 to be float, " (get-php-datatype z 'arg-parsing) " given"))))
                        (unless (flonum? w)
                            (set! w (or (mkflonum w 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 3 to be float, " (get-php-datatype w 'arg-parsing) " given"))))
                        (pragma ,(string-append v4 ".x = (float)$1") ($real->double x))
                        (pragma ,(string-append v4 ".y = (float)$1") ($real->double y))
                        (pragma ,(string-append v4 ".z = (float)$1") ($real->double z))
                        (pragma ,(string-append v4 ".w = (float)$1") ($real->double w))
                        #t)
                    (php-error ,func-name "() expects parameter " ,arg-idx " to be array with 4(xyzw order) float values, " size " given"))))))

; Matrix

(define-macro (%mkmatrix m0 m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12 m13 m14 m15)
    `(let ((mhash (make-php-hash 16)))
        (bpc_php_hash_insert_elong_obj mhash #e0 ,m0)
        (bpc_php_hash_insert_elong_obj mhash #e1 ,m1)
        (bpc_php_hash_insert_elong_obj mhash #e2 ,m2)
        (bpc_php_hash_insert_elong_obj mhash #e3 ,m3)
        (bpc_php_hash_insert_elong_obj mhash #e4 ,m4)
        (bpc_php_hash_insert_elong_obj mhash #e5 ,m5)
        (bpc_php_hash_insert_elong_obj mhash #e6 ,m6)
        (bpc_php_hash_insert_elong_obj mhash #e7 ,m7)
        (bpc_php_hash_insert_elong_obj mhash #e8 ,m8)
        (bpc_php_hash_insert_elong_obj mhash #e9 ,m9)
        (bpc_php_hash_insert_elong_obj mhash #e10 ,m10)
        (bpc_php_hash_insert_elong_obj mhash #e11 ,m11)
        (bpc_php_hash_insert_elong_obj mhash #e12 ,m12)
        (bpc_php_hash_insert_elong_obj mhash #e13 ,m13)
        (bpc_php_hash_insert_elong_obj mhash #e14 ,m14)
        (bpc_php_hash_insert_elong_obj mhash #e15 ,m15)
        mhash))

(define-macro (%mkmatrix-m m)
    `(%mkmatrix (pragma::double ,(string-append m ".m0"))
                (pragma::double ,(string-append m ".m1"))
                (pragma::double ,(string-append m ".m2"))
                (pragma::double ,(string-append m ".m3"))
                (pragma::double ,(string-append m ".m4"))
                (pragma::double ,(string-append m ".m5"))
                (pragma::double ,(string-append m ".m6"))
                (pragma::double ,(string-append m ".m7"))
                (pragma::double ,(string-append m ".m8"))
                (pragma::double ,(string-append m ".m9"))
                (pragma::double ,(string-append m ".m10"))
                (pragma::double ,(string-append m ".m11"))
                (pragma::double ,(string-append m ".m12"))
                (pragma::double ,(string-append m ".m13"))
                (pragma::double ,(string-append m ".m14"))
                (pragma::double ,(string-append m ".m15"))))

; Rectangle

(define-macro (%mkrect-r r)
    `(let ((rect (make-php-hash 4)))
        (bpc_php_hash_insert_elong_obj rect #e0 (pragma::double ,(string-append r ".x")))
        (bpc_php_hash_insert_elong_obj rect #e1 (pragma::double ,(string-append r ".y")))
        (bpc_php_hash_insert_elong_obj rect #e2 (pragma::double ,(string-append r ".width")))
        (bpc_php_hash_insert_elong_obj rect #e3 (pragma::double ,(string-append r ".height")))
        rect))

(define-macro (%init-c-rect func-name arg-idx rect r)
    `(begin
        (set! ,rect (mkhashw ,func-name ,arg-idx ,rect))
        (when ,rect
            (let ((size (php-hash-size ,rect)))
                (if (>=fx size 4)
                    (let ((x (bpc_php_hash_lookup_int ,rect #e0))
                          (y (bpc_php_hash_lookup_int ,rect #e1))
                          (width (bpc_php_hash_lookup_int ,rect #e2))
                          (height (bpc_php_hash_lookup_int ,rect #e3)))
                        (unless (flonum? x)
                            (set! x (or (mkflonum x 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 0 to be float, " (get-php-datatype x 'arg-parsing) " given"))))
                        (unless (flonum? y)
                            (set! y (or (mkflonum y 'arg-parsing)
                                        (php-error ,func-name "() expects parameter " ,arg-idx " array index 1 to be float, " (get-php-datatype y 'arg-parsing) " given"))))
                        (unless (flonum? width)
                            (set! width (or (mkflonum width 'arg-parsing)
                                            (php-error ,func-name "() expects parameter " ,arg-idx " array index 2 to be float, " (get-php-datatype width 'arg-parsing) " given"))))
                        (unless (flonum? height)
                            (set! height (or (mkflonum height 'arg-parsing)
                                             (php-error ,func-name "() expects parameter " ,arg-idx " array index 3 to be float, " (get-php-datatype height 'arg-parsing) " given"))))
                        (pragma ,(string-append r ".x = (float)$1") ($real->double x))
                        (pragma ,(string-append r ".y = (float)$1") ($real->double y))
                        (pragma ,(string-append r ".width = (float)$1") ($real->double width))
                        (pragma ,(string-append r ".height = (float)$1") ($real->double height))
                        #t)
                    (php-error ,func-name "() expects parameter " ,arg-idx " to be array with 4(xywh order) float values, " size " given"))))))
